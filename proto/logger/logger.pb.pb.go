// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logger.pb

package loggersvr

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request 请求数据格式
type Request struct {
	ServerId             int32    `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	ServerTag            string   `protobuf:"bytes,2,opt,name=serverTag,proto3" json:"serverTag,omitempty"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfbdaed7bfc6b1a9, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *Request) GetServerTag() string {
	if m != nil {
		return m.ServerTag
	}
	return ""
}

func (m *Request) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// Response 响应数据格式
type Response struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfbdaed7bfc6b1a9, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type RequestRegisterService struct {
	ServiceId            int32    `protobuf:"varint,1,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	ServiceName          string   `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServiceVersion       string   `protobuf:"bytes,3,opt,name=serviceVersion,proto3" json:"serviceVersion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestRegisterService) Reset()         { *m = RequestRegisterService{} }
func (m *RequestRegisterService) String() string { return proto.CompactTextString(m) }
func (*RequestRegisterService) ProtoMessage()    {}
func (*RequestRegisterService) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfbdaed7bfc6b1a9, []int{2}
}

func (m *RequestRegisterService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestRegisterService.Unmarshal(m, b)
}
func (m *RequestRegisterService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestRegisterService.Marshal(b, m, deterministic)
}
func (m *RequestRegisterService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRegisterService.Merge(m, src)
}
func (m *RequestRegisterService) XXX_Size() int {
	return xxx_messageInfo_RequestRegisterService.Size(m)
}
func (m *RequestRegisterService) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRegisterService.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRegisterService proto.InternalMessageInfo

func (m *RequestRegisterService) GetServiceId() int32 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

func (m *RequestRegisterService) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *RequestRegisterService) GetServiceVersion() string {
	if m != nil {
		return m.ServiceVersion
	}
	return ""
}

type ResponseRegisterService struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseRegisterService) Reset()         { *m = ResponseRegisterService{} }
func (m *ResponseRegisterService) String() string { return proto.CompactTextString(m) }
func (*ResponseRegisterService) ProtoMessage()    {}
func (*ResponseRegisterService) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfbdaed7bfc6b1a9, []int{3}
}

func (m *ResponseRegisterService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseRegisterService.Unmarshal(m, b)
}
func (m *ResponseRegisterService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseRegisterService.Marshal(b, m, deterministic)
}
func (m *ResponseRegisterService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseRegisterService.Merge(m, src)
}
func (m *ResponseRegisterService) XXX_Size() int {
	return xxx_messageInfo_ResponseRegisterService.Size(m)
}
func (m *ResponseRegisterService) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseRegisterService.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseRegisterService proto.InternalMessageInfo

func (m *ResponseRegisterService) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ResponseRegisterService) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "loggersvr.Request")
	proto.RegisterType((*Response)(nil), "loggersvr.Response")
	proto.RegisterType((*RequestRegisterService)(nil), "loggersvr.RequestRegisterService")
	proto.RegisterType((*ResponseRegisterService)(nil), "loggersvr.ResponseRegisterService")
}

func init() { proto.RegisterFile("logger.pb", fileDescriptor_cfbdaed7bfc6b1a9) }

var fileDescriptor_cfbdaed7bfc6b1a9 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xbb, 0x2d, 0xc6, 0x66, 0x0a, 0x2a, 0x23, 0xd4, 0x10, 0x3c, 0xc4, 0x3d, 0x48, 0x4e,
	0x41, 0xf4, 0x22, 0x1e, 0xf5, 0x24, 0x88, 0x87, 0xd4, 0x3f, 0xe0, 0x2d, 0x6d, 0x87, 0xb0, 0x60,
	0x9a, 0xb8, 0xb3, 0xcd, 0xd9, 0xcf, 0xe9, 0xa7, 0x11, 0xdb, 0x49, 0xaa, 0x51, 0xa1, 0xb7, 0x79,
	0x8f, 0xf9, 0xf3, 0x7b, 0x03, 0xfe, 0x6b, 0x99, 0xe7, 0x64, 0x93, 0x6a, 0x8a, 0x52, 0x72, 0x6d,
	0xf5, 0x23, 0xec, 0xa6, 0xf4, 0xb6, 0x24, 0x76, 0x18, 0xc2, 0x90, 0xc9, 0xd6, 0x64, 0x6f, 0xe7,
	0x81, 0x8a, 0x54, 0xbc, 0x93, 0xb6, 0x1a, 0x8f, 0xc1, 0x5f, 0xd7, 0x0f, 0x59, 0x1e, 0xf4, 0x23,
	0x15, 0xfb, 0xe9, 0xc6, 0xc0, 0x03, 0x18, 0x14, 0x9c, 0x07, 0x83, 0x95, 0xff, 0x55, 0x6a, 0x0d,
	0xc3, 0x94, 0xb8, 0x2a, 0x17, 0x4c, 0x38, 0x06, 0x8f, 0x5d, 0xe6, 0x96, 0x2c, 0x5b, 0x45, 0xe9,
	0x77, 0x05, 0x63, 0xb9, 0x9d, 0x52, 0x6e, 0xd8, 0x91, 0x9d, 0x90, 0xad, 0xcd, 0x8c, 0x9a, 0x73,
	0x66, 0x46, 0x2d, 0xcb, 0xc6, 0xc0, 0x08, 0x46, 0x22, 0xee, 0xb3, 0x82, 0x04, 0xe7, 0xbb, 0x85,
	0xa7, 0xb0, 0x27, 0xf2, 0x89, 0x2c, 0x9b, 0x72, 0x21, 0x6c, 0x1d, 0x57, 0xdf, 0xc0, 0x51, 0x83,
	0xd9, 0x45, 0xf8, 0x87, 0xba, 0xc9, 0xda, 0x6f, 0xb3, 0x9e, 0x7f, 0x28, 0xf0, 0xee, 0x56, 0x0f,
	0xc5, 0x2b, 0xf0, 0xaf, 0xcd, 0x7c, 0xe2, 0x2c, 0x65, 0x05, 0x62, 0xd2, 0xbe, 0x39, 0x91, 0x9c,
	0xe1, 0xe1, 0x0f, 0x6f, 0x7d, 0x59, 0xf7, 0x62, 0x75, 0xa6, 0xf0, 0x12, 0x46, 0xcf, 0xd6, 0x38,
	0x92, 0x55, 0xdb, 0x4f, 0xe3, 0x0b, 0xec, 0x77, 0xe9, 0x4f, 0x7e, 0x4f, 0x77, 0x5a, 0x42, 0xfd,
	0xc7, 0xb2, 0x4e, 0x8f, 0xee, 0x4d, 0xbd, 0xca, 0x96, 0xae, 0xbc, 0xf8, 0x0c, 0x00, 0x00, 0xff,
	0xff, 0x6d, 0x2a, 0xb5, 0x76, 0x3e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggerClient interface {
	BidStream(ctx context.Context, opts ...grpc.CallOption) (Logger_BidStreamClient, error)
	WriteLogger(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	RegisterService(ctx context.Context, in *RequestRegisterService, opts ...grpc.CallOption) (*ResponseRegisterService, error)
}

type loggerClient struct {
	cc *grpc.ClientConn
}

func NewLoggerClient(cc *grpc.ClientConn) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) BidStream(ctx context.Context, opts ...grpc.CallOption) (Logger_BidStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Logger_serviceDesc.Streams[0], "/loggersvr.Logger/BidStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggerBidStreamClient{stream}
	return x, nil
}

type Logger_BidStreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type loggerBidStreamClient struct {
	grpc.ClientStream
}

func (x *loggerBidStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *loggerBidStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *loggerClient) WriteLogger(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/loggersvr.Logger/WriteLogger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) RegisterService(ctx context.Context, in *RequestRegisterService, opts ...grpc.CallOption) (*ResponseRegisterService, error) {
	out := new(ResponseRegisterService)
	err := c.cc.Invoke(ctx, "/loggersvr.Logger/RegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerServer is the server API for Logger service.
type LoggerServer interface {
	BidStream(Logger_BidStreamServer) error
	WriteLogger(context.Context, *Request) (*Response, error)
	RegisterService(context.Context, *RequestRegisterService) (*ResponseRegisterService, error)
}

func RegisterLoggerServer(s *grpc.Server, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_BidStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoggerServer).BidStream(&loggerBidStreamServer{stream})
}

type Logger_BidStreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type loggerBidStreamServer struct {
	grpc.ServerStream
}

func (x *loggerBidStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *loggerBidStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Logger_WriteLogger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).WriteLogger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loggersvr.Logger/WriteLogger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).WriteLogger(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegisterService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loggersvr.Logger/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).RegisterService(ctx, req.(*RequestRegisterService))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "loggersvr.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteLogger",
			Handler:    _Logger_WriteLogger_Handler,
		},
		{
			MethodName: "RegisterService",
			Handler:    _Logger_RegisterService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidStream",
			Handler:       _Logger_BidStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "logger.pb",
}
